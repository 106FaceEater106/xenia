//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer XeTextureLoadConstants
// {
//
//   uint xe_texture_load_guest_base;   // Offset:    0 Size:     4
//   uint xe_texture_load_guest_pitch;  // Offset:    4 Size:     4
//   uint2 xe_texture_guest_storage_width_height;// Offset:    8 Size:     8
//   bool xe_texture_load_is_3d;        // Offset:   16 Size:     4
//   uint xe_texture_load_guest_format; // Offset:   20 Size:     4 [unused]
//   uint xe_texture_load_endianness;   // Offset:   24 Size:     4
//   uint3 xe_texture_load_size_blocks; // Offset:   32 Size:    12
//   uint xe_texture_load_height_texels;// Offset:   44 Size:     4 [unused]
//   uint xe_texture_load_host_base;    // Offset:   48 Size:     4
//   uint xe_texture_load_host_pitch;   // Offset:   52 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      ID      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- ------- -------------- ------
// xe_texture_load_source            texture    byte         r/o      T0             t0      1 
// xe_texture_load_dest                  UAV    byte         r/w      U0             u0      1 
// XeTextureLoadConstants            cbuffer      NA          NA     CB0            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_1
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[0:0][4], immediateIndexed, space=0
dcl_resource_raw T0[0:0], space=0
dcl_uav_raw U0[0:0], space=0
dcl_input vThreadID.xyz
dcl_temps 5
dcl_thread_group 16, 16, 1
uge r0.xyz, vThreadID.xyzx, CB0[0][2].xyzx
or r0.x, r0.y, r0.x
or r0.x, r0.z, r0.x
if_nz r0.x
  ret 
endif 
ieq r0.x, CB0[0][0].y, l(-1)
if_nz r0.x
  if_nz CB0[0][1].x
    iadd r0.xy, CB0[0][0].wzww, l(31, 31, 0, 0)
    ushr r1.xyzw, vThreadID.yzxy, l(4, 2, 5, 3)
    ushr r0.xy, r0.xyxx, l(4, 5, 0, 0)
    and r0.x, r0.x, l(0x0ffffffe)
    imad r0.x, r1.y, r0.x, r1.x
    imad r0.x, r0.x, r0.y, r1.z
    ishl r0.y, vThreadID.y, l(10)
    and r0.y, r0.y, l(6144)
    bfi r0.y, l(3), l(8), vThreadID.x, r0.y
    ushr r0.y, r0.y, l(6)
    iadd r0.z, r1.y, r1.w
    ushr r0.w, vThreadID.x, l(3)
    bfi r1.x, l(1), l(1), r0.z, l(0)
    iadd r0.w, r0.w, r1.x
    bfi r0.w, l(2), l(1), r0.w, l(0)
    bfi r0.z, l(1), l(0), r0.z, r0.w
    and r0.w, r0.y, l(112)
    bfi r1.xy, l(20, 20, 0, 0), l(10, 13, 0, 0), r0.xxxx, l(0, 0, 0, 0)
    imad r0.xw, r0.wwww, l(2, 0, 0, 16), r1.xxxy
    bfi r0.xy, l(4, 4, 0, 0), l(0, 3, 0, 0), r0.yyyy, r0.xwxx
    bfi r0.xy, l(2, 2, 0, 0), l(8, 11, 0, 0), vThreadID.zzzz, r0.xyxx
    ubfe r0.w, l(3), l(6), r0.x
    and r1.x, r0.z, l(6)
    bfi r0.z, l(1), l(8), r0.z, l(0)
    imad r0.z, r0.w, l(32), r0.z
    imad r0.z, r1.x, l(4), r0.z
    bfi r0.xy, l(1, 1, 0, 0), l(4, 7, 0, 0), vThreadID.yyyy, r0.xyxx
    bfi r0.y, l(9), l(3), r0.z, r0.y
    bfi r0.x, l(6), l(0), r0.x, r0.y
  else 
    ushr r1.xyzw, vThreadID.xyxy, l(5, 5, 3, 2)
    iadd r0.y, CB0[0][0].z, l(31)
    ushr r0.y, r0.y, l(5)
    imad r0.y, r1.y, r0.y, r1.x
    ishl r0.zw, vThreadID.yyyy, l(0, 0, 4, 7)
    and r0.zw, r0.zzzw, l(0, 0, 224, 2048)
    bfi r1.x, l(3), l(2), vThreadID.x, r0.z
    ishl r0.z, r0.z, l(1)
    bfi r0.z, l(3), l(3), vThreadID.x, r0.z
    and r0.z, r0.z, l(480)
    bfi r1.y, l(23), l(9), r0.y, r0.z
    bfi r1.y, l(4), l(0), r1.x, r1.y
    bfi r1.y, l(1), l(4), vThreadID.y, r1.y
    ishl r2.xy, r0.zzzz, l(3, 2, 0, 0)
    bfi r0.yz, l(0, 23, 23, 0), l(0, 12, 11, 0), r0.yyyy, r2.xxyx
    bfi r0.yz, l(0, 4, 4, 0), l(0, 3, 2, 0), r1.xxxx, r0.yyzy
    bfi r0.yz, l(0, 1, 1, 0), l(0, 7, 6, 0), vThreadID.yyyy, r0.yyzy
    bfi r0.y, l(12), l(0), r0.w, r0.y
    and r0.z, r0.z, l(1792)
    iadd r0.y, r0.y, r0.z
    and r0.z, r1.w, l(2)
    iadd r0.z, r0.z, r1.z
    bfi r0.z, l(2), l(6), r0.z, l(0)
    iadd r0.y, r0.y, r0.z
    bfi r0.x, l(6), l(0), r1.y, r0.y
  endif 
else 
  ishl r0.y, vThreadID.x, l(2)
  iadd r0.z, CB0[0][2].y, l(31)
  and r0.z, r0.z, l(-32)
  imad r0.z, vThreadID.z, r0.z, vThreadID.y
  imad r0.x, r0.z, CB0[0][0].y, r0.y
endif 
iadd r0.x, r0.x, CB0[0][0].x
ishl r0.x, r0.x, l(2)
ld_raw r0.xyzw, r0.x, T0[0].xyzw
ushr r1.x, CB0[0][1].z, l(1)
xor r1.x, r1.x, CB0[0][1].z
and r1.x, r1.x, l(1)
if_nz r1.x
  ishl r1.xyzw, r0.xyzw, l(8, 8, 8, 8)
  and r1.xyzw, r1.xyzw, l(0xff00ff00, 0xff00ff00, 0xff00ff00, 0xff00ff00)
  ushr r2.xyzw, r0.xyzw, l(8, 8, 8, 8)
  and r2.xyzw, r2.xyzw, l(0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff)
  iadd r0.xyzw, r1.xyzw, r2.xyzw
endif 
and r1.x, CB0[0][1].z, l(2)
if_nz r1.x
  ushr r1.xyzw, r0.xyzw, l(16, 16, 16, 16)
  bfi r0.xyzw, l(16, 16, 16, 16), l(16, 16, 16, 16), r0.xyzw, r1.xyzw
endif 
ushr r1.xyzw, r0.xyzw, l(8, 8, 8, 8)
ubfe r0.xyzw, l(20, 20, 20, 20), l(8, 8, 8, 8), r0.xyzw
ushr r2.xyzw, r1.xyzw, l(20, 20, 20, 20)
firstbit_hi r3.xyzw, r0.xyzw
iadd r3.xyzw, r3.xyzw, l(-11, -11, -11, -11)
movc r3.xyzw, r0.xyzw, r3.xyzw, l(21,21,21,21)
iadd r4.xyzw, -r3.xyzw, l(1, 1, 1, 1)
movc r4.xyzw, r2.xyzw, r2.xyzw, r4.xyzw
ishl r3.xyzw, r0.xyzw, r3.xyzw
and r3.xyzw, r3.xyzw, l(0x000fffff, 0x000fffff, 0x000fffff, 0x000fffff)
movc r0.xyzw, r2.xyzw, r0.xyzw, r3.xyzw
ishl r2.xyzw, r4.xyzw, l(23, 23, 23, 23)
iadd r2.xyzw, r2.xyzw, l(0x38000000, 0x38000000, 0x38000000, 0x38000000)
ishl r0.xyzw, r0.xyzw, l(3, 3, 3, 3)
iadd r0.xyzw, r2.xyzw, r0.xyzw
movc r0.xyzw, r1.xyzw, r0.xyzw, l(0,0,0,0)
ishl r1.xy, vThreadID.xyxx, l(1, 1, 0, 0)
ishl r1.z, CB0[0][2].y, l(1)
ishl r1.x, r1.x, l(2)
imad r1.y, vThreadID.z, r1.z, r1.y
imad r1.x, r1.y, CB0[0][3].y, r1.x
iadd r1.x, r1.x, CB0[0][3].x
store_raw U0[0].xy, r1.x, r0.xyxx
iadd r0.x, r1.x, CB0[0][3].y
store_raw U0[0].xy, r0.x, r0.zwzz
ret 
// Approximately 116 instruction slots used
